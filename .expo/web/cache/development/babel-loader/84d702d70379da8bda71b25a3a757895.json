{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleMapIsInstalled = exports.createNotSupportedComponent = exports.getNativeMapName = exports.ProviderContext = exports.NOT_SUPPORTED = exports.USES_DEFAULT_IMPLEMENTATION = exports.SUPPORTED = void 0;\n\nvar react_1 = require(\"react\");\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar ProviderConstants_1 = require(\"./ProviderConstants\");\n\nexports.SUPPORTED = 'SUPPORTED';\nexports.USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexports.NOT_SUPPORTED = 'NOT_SUPPORTED';\nexports.ProviderContext = (0, react_1.createContext)(undefined);\n\nfunction getNativeMapName(provider) {\n  if (react_native_1.Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n\n  if (provider === ProviderConstants_1.PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n\n  return 'AIRMap';\n}\n\nexports.getNativeMapName = getNativeMapName;\n\nfunction getNativeComponentName(provider, component) {\n  return \"\" + getNativeMapName(provider) + component;\n}\n\nvar createNotSupportedComponent = function createNotSupportedComponent(message) {\n  return function () {\n    console.error(message);\n    return null;\n  };\n};\n\nexports.createNotSupportedComponent = createNotSupportedComponent;\nexports.googleMapIsInstalled = !!react_native_1.UIManager.getViewManagerConfig(getNativeMapName(ProviderConstants_1.PROVIDER_GOOGLE));\n\nfunction decorateMapComponent(Component, componentName, providers) {\n  var components = {};\n\n  var getDefaultComponent = function getDefaultComponent() {\n    return (0, react_native_1.requireNativeComponent)(getNativeComponentName(undefined, componentName));\n  };\n\n  Component.contextType = exports.ProviderContext;\n\n  Component.prototype.getNativeComponent = function getNativeComponent() {\n    var provider = this.context;\n    var key = provider || 'default';\n\n    if (components[key]) {\n      return components[key];\n    }\n\n    if (provider === ProviderConstants_1.PROVIDER_DEFAULT) {\n      components[key] = getDefaultComponent();\n      return components[key];\n    }\n\n    var providerInfo = providers[provider];\n\n    if (react_native_1.Platform.OS !== 'android' && react_native_1.Platform.OS !== 'ios') {\n      throw new Error(\"react-native-maps doesn't support \" + react_native_1.Platform.OS);\n    }\n\n    var platformSupport = providerInfo[react_native_1.Platform.OS];\n    var nativeComponentName = getNativeComponentName(provider, componentName);\n\n    if (platformSupport === exports.NOT_SUPPORTED) {\n      components[key] = (0, exports.createNotSupportedComponent)(\"react-native-maps: \" + nativeComponentName + \" is not supported on \" + react_native_1.Platform.OS);\n    } else if (platformSupport === exports.SUPPORTED) {\n      if (provider !== ProviderConstants_1.PROVIDER_GOOGLE || react_native_1.Platform.OS === 'ios' && exports.googleMapIsInstalled) {\n        components[key] = (0, react_native_1.requireNativeComponent)(nativeComponentName);\n      }\n    } else {\n      if (!components.default) {\n        components.default = getDefaultComponent();\n      }\n\n      components[key] = components.default;\n    }\n\n    return components[key];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    var nativeComponentName = getNativeComponentName(this.context, componentName);\n    return react_native_1.UIManager.getViewManagerConfig(nativeComponentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {\n    var nativeComponentName = getNativeComponentName(this.context, componentName) + \"Manager\";\n    return react_native_1.NativeModules[nativeComponentName][name];\n  };\n\n  return Component;\n}\n\nexports.default = decorateMapComponent;","map":{"version":3,"sources":["/Users/jasminebabayara/Documents/Projects/ReactNative/Food-Delivery-App/node_modules/react-native-maps/lib/decorateMapComponent.js"],"names":["Object","defineProperty","exports","value","googleMapIsInstalled","createNotSupportedComponent","getNativeMapName","ProviderContext","NOT_SUPPORTED","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","react_1","require","ProviderConstants_1","createContext","undefined","provider","react_native_1","Platform","OS","PROVIDER_GOOGLE","getNativeComponentName","component","message","console","error","UIManager","getViewManagerConfig","decorateMapComponent","Component","componentName","providers","components","getDefaultComponent","requireNativeComponent","contextType","prototype","getNativeComponent","context","key","PROVIDER_DEFAULT","providerInfo","Error","platformSupport","nativeComponentName","default","getUIManagerCommand","name","Commands","getMapManagerCommand","NativeModules"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleMapIsInstalled = exports.createNotSupportedComponent = exports.getNativeMapName = exports.ProviderContext = exports.NOT_SUPPORTED = exports.USES_DEFAULT_IMPLEMENTATION = exports.SUPPORTED = void 0;\nconst react_1 = require(\"react\");\nconst react_native_1 = require(\"react-native\");\nconst ProviderConstants_1 = require(\"./ProviderConstants\");\nexports.SUPPORTED = 'SUPPORTED';\nexports.USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexports.NOT_SUPPORTED = 'NOT_SUPPORTED';\nexports.ProviderContext = (0, react_1.createContext)(undefined);\nfunction getNativeMapName(provider) {\n    if (react_native_1.Platform.OS === 'android') {\n        return 'AIRMap';\n    }\n    if (provider === ProviderConstants_1.PROVIDER_GOOGLE) {\n        return 'AIRGoogleMap';\n    }\n    return 'AIRMap';\n}\nexports.getNativeMapName = getNativeMapName;\nfunction getNativeComponentName(provider, component) {\n    return `${getNativeMapName(provider)}${component}`;\n}\nconst createNotSupportedComponent = (message) => () => {\n    console.error(message);\n    return null;\n};\nexports.createNotSupportedComponent = createNotSupportedComponent;\nexports.googleMapIsInstalled = !!react_native_1.UIManager.getViewManagerConfig(getNativeMapName(ProviderConstants_1.PROVIDER_GOOGLE));\nfunction decorateMapComponent(Component, componentName, providers) {\n    const components = {};\n    const getDefaultComponent = () => (0, react_native_1.requireNativeComponent)(getNativeComponentName(undefined, componentName));\n    Component.contextType = exports.ProviderContext;\n    Component.prototype.getNativeComponent =\n        function getNativeComponent() {\n            const provider = this.context;\n            const key = provider || 'default';\n            if (components[key]) {\n                return components[key];\n            }\n            if (provider === ProviderConstants_1.PROVIDER_DEFAULT) {\n                components[key] = getDefaultComponent();\n                return components[key];\n            }\n            const providerInfo = providers[provider];\n            // quick fix. Previous code assumed android | ios\n            if (react_native_1.Platform.OS !== 'android' && react_native_1.Platform.OS !== 'ios') {\n                throw new Error(`react-native-maps doesn't support ${react_native_1.Platform.OS}`);\n            }\n            const platformSupport = providerInfo[react_native_1.Platform.OS];\n            const nativeComponentName = getNativeComponentName(provider, componentName);\n            if (platformSupport === exports.NOT_SUPPORTED) {\n                components[key] = (0, exports.createNotSupportedComponent)(`react-native-maps: ${nativeComponentName} is not supported on ${react_native_1.Platform.OS}`);\n            }\n            else if (platformSupport === exports.SUPPORTED) {\n                if (provider !== ProviderConstants_1.PROVIDER_GOOGLE ||\n                    (react_native_1.Platform.OS === 'ios' && exports.googleMapIsInstalled)) {\n                    components[key] = (0, react_native_1.requireNativeComponent)(nativeComponentName);\n                }\n            }\n            else {\n                // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n                if (!components.default) {\n                    components.default = getDefaultComponent();\n                }\n                components[key] = components.default;\n            }\n            return components[key];\n        };\n    Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n        const nativeComponentName = getNativeComponentName(this.context, componentName);\n        return react_native_1.UIManager.getViewManagerConfig(nativeComponentName).Commands[name];\n    };\n    Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {\n        const nativeComponentName = `${getNativeComponentName(this.context, componentName)}Manager`;\n        return react_native_1.NativeModules[nativeComponentName][name];\n    };\n    return Component;\n}\nexports.default = decorateMapComponent;\n"]},"metadata":{},"sourceType":"script"}